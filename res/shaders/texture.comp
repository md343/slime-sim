#version 460 core

struct pos
{
	vec4 position;
	vec4 countest;
};

layout(rgba32f, binding = 0) uniform image2D screen;
layout(std430, binding=1) buffer Pos
{
    pos points[];
};

uniform int PARTICLES;

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
void main()
{
	vec4 pixel = imageLoad(screen, ivec2(gl_GlobalInvocationID.xy));
	vec4 pixelbase = vec4(0.075, 0.133, 0.173, 1.0);
	pixel = pixel*0.9 + pixelbase*0.1;
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	//float dist = 1000;

	ivec2 dims = imageSize(screen);
	float x = -(float(pixel_coords.x * 2 - dims.x) / dims.x); // transforms to [-1.0, 1.0]
	float y = -(float(pixel_coords.y * 2 - dims.y) / dims.y); // transforms to [-1.0, 1.0]
	vec2 pixel_coords_f = vec2(x, y);
	vec2 agentCentre;// sense1, sense2, pix_vec;
	float test1;//, s1, s2;
	float size = 0.01;
	//float senseRad = 0.2;
	

	// for (int i = 0; i<PARTICLES; i++)
	// {	
	// 	agentCentre = points[i].position.xy;
	// 	//pix_vec = pixel_coords_f-agentCentre;

	// 	//sense1 = points[i].senseNodes.xy;
	// 	//sense2 = points[i].senseNodes.zw;
	// 	//test1 = distance(pixel_coords_f, sense1);
	// 	//test2 = distance(pixel_coords_f, sense2);
	// 	//test1 = min(test1, test2);
	
	// 	// if (test1 < size*0.2)
	// 	// {
	// 	// 	pixel = vec4(0.2, 0.8, 0.5, 1.0);
	// 	// 	break;
	// 	// }
	// 	test1 = distance(pixel_coords_f, agentCentre);
	// 	// if (i==0)
	// 	// {
	// 	// if (test1 == 0){
	// 	// 	continue;
	// 	// }
	// 	// if (test1 < senseRad)
	// 	// {
	// 	// 	sense1 = points[i].senseNodes.xy - agentCentre;
	// 	// 	sense1 = cross(vec3(sense1, 0.0), vec3(0.0,0.0,1.0)).xy;
	// 	// 	sense2 = points[i].senseNodes.zw - agentCentre;
	// 	// 	sense2 = cross(vec3(sense2, 0.0), vec3(0.0,0.0,-1.0)).xy;
	// 	// 	s1 = dot(sense1, pix_vec);
	// 	// 	s2 = dot(sense2, pix_vec);
	// 	// 	if (s1 < 0 && s2 < 0 && pixel.x < 0.8)
	// 	// 	{
	// 	// 		pixel = pixel + vec4(0.2, 0.0, 0.0, 1.0);
	// 	// 	}

	// 	// 	//pixel = vec4(0.2, 0.8, 0.5, 1.0);
			
	// 	// }
	// 	//}

	// 	if (test1 < size)
	// 	{
	// 		pixel = vec4(0.8, 0.1, 0.5, 1.0);
	// 		break;
	// 	}
	// }

	imageStore(screen, pixel_coords, pixel);
}