#version 430 compatibility
float PI = 3.1415926535897932384626433832795;
struct agent
{
	vec4 position;
};

// struct cell {
// 	vec3 val;
// }
layout(rgba32f, binding=0) uniform image2D screen;
layout(std430, binding=1) buffer Agent
{
    agent points[];
};

// layout(std430, binding=2) buffer TrailMap {
// 	cell TrailMap[];
// }

uniform int PARTICLES;
uniform float dt;
uniform float speed;
uniform float viewAngle;
uniform mat2 rotL;
uniform mat2 rotR;
uniform int senseRange;

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

uint hash(uint state)
{
	state ^= 2747636419u;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	return state;
}

float scaleToRange01(uint state)
{
	return state / 4294967295.0;
}

float sense2(ivec2 targetCentre)
{
	ivec2 dims = imageSize(screen);
	int targetX, targetY;
	float sum = 0;
	float strength;
	for (int i = -senseRange; i < senseRange;i++){
		targetX = targetCentre.x + i;
		if (targetX < 10 || targetX > dims.x-10){
			sum += -1;
			continue;
		}
		for (int j = -senseRange; j < senseRange;j++){
			targetY = targetCentre.y + j;
			if (targetY < 10 || targetY > dims.y-10){
				sum += -1;
				continue;
			}
			strength = imageLoad(screen, ivec2(targetX, targetY)).x;
			sum += strength-0.075;
		}
	}
	return sum;
}

int sense(vec2 v_norm, ivec2 pixel_coords)
{
	vec2 targetL, targetC, targetR;
	vec3 count = vec3(0.0, 0.0, 0.0); //L, C, R
	float range = 15.0;
	
	ivec2 targetCentre;
	
	targetL = rotL*v_norm*range;
	targetC = v_norm*range;
	targetR = rotR*v_norm*range;
	
	targetCentre = pixel_coords + ivec2(int(targetL.x), int(targetL.y));
	count.x = sense2(targetCentre);

	targetCentre = pixel_coords + ivec2(int(targetC.x), int(targetC.y));
	count.y = sense2(targetCentre);

	targetCentre = pixel_coords + ivec2(int(targetR.x), int(targetR.y));
	count.z = sense2(targetCentre);

	if (count.x > count.y && count.x > count.z)
	{
		return -1;
	}
	if (count.z > count.x && count.z > count.y)
	{
		return 1;
	}
	return 0;
}


void main()
{
    const float DT = dt;//0.001;
	
	ivec2 dims = imageSize(screen);
	vec4 pixel = vec4(0.8, 0.1, 0.5, 1.0);

    uint gid = gl_GlobalInvocationID.x;
    vec2 p = points[gid].position.xy;

	ivec2 pixel_coords = ivec2(int(floor((p.x+1)/2*dims.x)), int(floor((p.y+1)/2*dims.y)));
	float dir = points[gid].position.z;
	float randomness = scaleToRange01(hash(uint(p.x + p.y * dims.x)));
	vec2 v_norm = vec2(cos(dir*PI), sin(dir*PI));
	
	int turn = sense(v_norm, pixel_coords);
	dir = dir - turn*(randomness)*0.4 +(randomness-0.5)*0.1;
	if (dir > 1)
	{
		dir = dir-2.0;
	}
	if (dir < -1)
	{
		dir = dir+2.0;
	}

	v_norm = vec2(cos(dir*PI), sin(dir*PI));
	vec2 v = speed*v_norm;
    vec2 pp = p + v * DT;

	// if (pp.x<-1)
	// {
	// 	pp.x=-1;
	// }
	
	// if (pp.x>1)
	// {
	// 	pp.x=1;
	// }
	// if (pp.y<-1)
	// {
	// 	pp.y=-1;
	// }
	
	// if (pp.y>1)
	// {
	// 	pp.y=1;
	// }
    
    points[gid].position.xy = pp;
	points[gid].position.z = dir;
	imageStore(screen, pixel_coords, pixel);
}